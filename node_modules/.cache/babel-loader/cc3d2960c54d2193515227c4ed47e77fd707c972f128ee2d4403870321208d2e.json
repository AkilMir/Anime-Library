{"ast":null,"code":"var _jsxFileName = \"/Users/shaun/Documents/Hacks-Project/anime-library/src/App.js\";\nimport { useEffect } from 'react';\nimport './App.css';\n\n// Generate a random code verifier\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateCodeVerifier(length) {\n  const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~';\n  let verifier = '';\n  for (let i = 0; i < length; i++) {\n    const randomIndex = Math.floor(Math.random() * characters.length);\n    verifier += characters[randomIndex];\n  }\n  return verifier;\n}\nconst client_id = '041aaa9e068b55ee57358403438e841f';\nconst API_URL = 'https://api.myanimelist.net/v2/anime/10357?fields=rank,mean,alternative_titles> X-MAL-CLIENT-ID: 041aaa9e068b55ee57358403438e841f';\nasync function App() {\n  var _s = $RefreshSig$();\n  /*  const searchMovies = async (title) => {\n     const response = await fetch(`${API_URL}&query=${title}`);\n     const data = await response.json();\n     \n   } \n     \n   useEffect(() => {\n     searchMovies('Naruto');\n   }, []); */\n\n  function App() {\n    _s();\n    const [data, setData] = useState(null);\n    useEffect(() => {\n      fetch(API_URL).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(data => setData(data)).catch(error => console.error('Error:', error));\n    }, []);\n\n    // Use the data in your component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(data, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n  _s(App, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","generateCodeVerifier","length","characters","verifier","i","randomIndex","Math","floor","random","client_id","API_URL","App","_s","$RefreshSig$","data","setData","useState","fetch","then","response","ok","Error","json","catch","error","console","children","JSON","stringify","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shaun/Documents/Hacks-Project/anime-library/src/App.js"],"sourcesContent":["import { useEffect } from 'react';\nimport './App.css';\n\n// Generate a random code verifier\nfunction generateCodeVerifier(length) {\n  const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~';\n  let verifier = '';\n  for (let i = 0; i < length; i++) {\n      const randomIndex = Math.floor(Math.random() * characters.length);\n      verifier += characters[randomIndex];\n  }\n  return verifier;\n}\n\n\nconst client_id = '041aaa9e068b55ee57358403438e841f';\nconst API_URL = 'https://api.myanimelist.net/v2/anime/10357?fields=rank,mean,alternative_titles> X-MAL-CLIENT-ID: 041aaa9e068b55ee57358403438e841f'\n;\n\n\n\n\nasync function App() {\n /*  const searchMovies = async (title) => {\n    const response = await fetch(`${API_URL}&query=${title}`);\n    const data = await response.json();\n    \n  } \n    \n  useEffect(() => {\n    searchMovies('Naruto');\n  }, []); */\n  \n  function App() {\n    const [data, setData] = useState(null);\n  \n    useEffect(() => {\n      fetch(API_URL)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.json();\n        })\n        .then(data => setData(data))\n        .catch(error => console.error('Error:', error));\n    }, []);\n  \n    // Use the data in your component\n    return (\n      <div>\n        <pre>{JSON.stringify(data, null, 2)}</pre>\n      </div>\n    );\n  }\n\n  return (\n    <div >\n      <header >\n        \n        <p>\n          \n        </p>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,oBAAoBA,CAACC,MAAM,EAAE;EACpC,MAAMC,UAAU,GAAG,oEAAoE;EACvF,IAAIC,QAAQ,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC7B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,UAAU,CAACD,MAAM,CAAC;IACjEE,QAAQ,IAAID,UAAU,CAACG,WAAW,CAAC;EACvC;EACA,OAAOF,QAAQ;AACjB;AAGA,MAAMM,SAAS,GAAG,kCAAkC;AACpD,MAAMC,OAAO,GAAG,mIAAmI;AAMnJ,eAAeC,GAAGA,CAAA,EAAG;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASF,GAAGA,CAAA,EAAG;IAAAC,EAAA;IACb,MAAM,CAACE,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;IAEtCnB,SAAS,CAAC,MAAM;MACdoB,KAAK,CAACP,OAAO,CAAC,CACXQ,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDJ,IAAI,CAACJ,IAAI,IAAIC,OAAO,CAACD,IAAI,CAAC,CAAC,CAC3BS,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;IACnD,CAAC,EAAE,EAAE,CAAC;;IAEN;IACA,oBACEzB,OAAA;MAAA2B,QAAA,eACE3B,OAAA;QAAA2B,QAAA,EAAMC,IAAI,CAACC,SAAS,CAACd,IAAI,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAEV;EAACpB,EAAA,CArBQD,GAAG;EAuBZ,oBACEZ,OAAA;IAAA2B,QAAA,eACE3B,OAAA;MAAA2B,QAAA,eAEE3B,OAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACC,EAAA,GA7CctB,GAAG;AA+ClB,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}