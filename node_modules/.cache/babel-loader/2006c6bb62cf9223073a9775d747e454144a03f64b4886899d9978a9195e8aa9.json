{"ast":null,"code":"var _jsxFileName = \"/Users/shaun/Documents/Hacks-Project/anime-library/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Generate a random code verifier\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateCodeVerifier(length) {\n  const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~';\n  let verifier = '';\n  for (let i = 0; i < length; i++) {\n    const randomIndex = Math.floor(Math.random() * characters.length);\n    verifier += characters[randomIndex];\n  }\n  return verifier;\n}\nconst client_id = '041aaa9e068b55ee57358403438e841f';\nconst API_URL = 'https://myanimelist.net/v1/oauth2/authorize?response_type=code&client_id=' + client_id + '&code_challenge=' + generateCodeVerifier(50);\n\n// Create a state variable for the response data\nconst [data, setData] = useState(null);\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\n// Make a GET request to the API_URL\nfetch(API_URL).then(response => response.json()).then(data => setData(data)).catch(error => console.error('Error:', error));\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 32,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","generateCodeVerifier","length","characters","verifier","i","randomIndex","Math","floor","random","client_id","API_URL","data","setData","useState","render","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById","fetch","then","response","json","catch","error","console"],"sources":["/Users/shaun/Documents/Hacks-Project/anime-library/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Generate a random code verifier\nfunction generateCodeVerifier(length) {\n  const characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~';\n  let verifier = '';\n  for (let i = 0; i < length; i++) {\n      const randomIndex = Math.floor(Math.random() * characters.length);\n      verifier += characters[randomIndex];\n  }\n  return verifier;\n}\nconst client_id = '041aaa9e068b55ee57358403438e841f'\nconst API_URL = 'https://myanimelist.net/v1/oauth2/authorize?response_type=code&client_id=' + client_id + '&code_challenge=' + generateCodeVerifier(50)\n\n\n// Create a state variable for the response data\nconst [data, setData] = useState(null);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// Make a GET request to the API_URL\nfetch(API_URL)\n  .then(response => response.json())\n  .then(data => setData(data))\n  .catch(error => console.error('Error:', error));\n\nReactDOM.render(<App />, document.getElementById('root'));\n  \n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,oBAAoBA,CAACC,MAAM,EAAE;EACpC,MAAMC,UAAU,GAAG,oEAAoE;EACvF,IAAIC,QAAQ,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC7B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,UAAU,CAACD,MAAM,CAAC;IACjEE,QAAQ,IAAID,UAAU,CAACG,WAAW,CAAC;EACvC;EACA,OAAOF,QAAQ;AACjB;AACA,MAAMM,SAAS,GAAG,kCAAkC;AACpD,MAAMC,OAAO,GAAG,2EAA2E,GAAGD,SAAS,GAAG,kBAAkB,GAAGT,oBAAoB,CAAC,EAAE,CAAC;;AAGvJ;AACA,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;AAEtCjB,QAAQ,CAACkB,MAAM,eAACf,OAAA,CAACF,GAAG;EAAAkB,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,EAAEC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;;AAGzD;AACAC,KAAK,CAACX,OAAO,CAAC,CACXY,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACX,IAAI,IAAIC,OAAO,CAACD,IAAI,CAAC,CAAC,CAC3Bc,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;AAEjD9B,QAAQ,CAACkB,MAAM,eAACf,OAAA,CAACF,GAAG;EAAAkB,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,EAAEC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}